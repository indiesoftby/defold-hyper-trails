go.property("obj_scale", vmath.vector3(0.5, 0.5, 0.5))
go.property("spawn_at_position", vmath.vector3(181, 423, 0))

local trail_maker = require("hyper_trails.trail_maker")

local function spawn_object(self)
	local scale = self.obj_scale
	local position = self.spawn_at_position
	local obj_id = factory.create("#factory_object", position, nil, nil, scale)
	msg.post(obj_id, "apply_force", { force = vmath.vector3((math.random() - 0.5) * 10000, (math.random() + 0.5) * 10000, 0), position = position })

	local trail_id = factory.create("#factory_trail", vmath.vector3(0))
	local trail_instance = {
		trail_object_id = trail_id,
		kill_timer = 3,

		-- trail maker options
		follow_object_id = obj_id,
		absolute_position = true,
		use_world_position = false,
		trail_width = 15.0 * scale.x,
		trail_tint_color = vmath.vector4(1.0, 1.0, 1.0, 1.0),
		segment_length_max = 0,
		segment_length_min = 0,
		points_count = 20,
		points_limit = 0,
		fade_tail_alpha = 20,
		shrink_tail_width = true,
		shrink_length_per_sec = 0,
		texture_tiling = false,
		trail_mesh_url = msg.url(nil, trail_id, "mesh"),
	}
	table.insert(self.trails, trail_instance)

	trail_maker.init_vars(trail_instance)
	trail_maker.init_buffers(trail_instance)
	trail_maker.init_props(trail_instance)
	trail_maker.init_data_points(trail_instance)
	trail_maker.draw_trail(trail_instance)
end

function init(self)
	self.trails = {}

	timer.delay(0.05, true, spawn_object)
end

function final(self)
	for _, trail_instance in ipairs(self.trails) do
		go.delete(trail_instance.trail_object_id)
		go.delete(trail_instance.follow_object_id)
		trail_maker.final(trail_instance)
	end
	self.trails = nil
end

function update(self, dt)
	local removal_list = {}
	for i, trail_instance in ipairs(self.trails) do
		trail_maker.follow_position(trail_instance, dt)
		trail_maker.draw_trail(trail_instance)

		trail_instance.kill_timer = trail_instance.kill_timer - dt
		if trail_instance.kill_timer < 0 then
			table.insert(removal_list, i, 1)
		end
	end

	for _, i in ipairs(removal_list) do
		local trail_instance = self.trails[i]
		table.remove(self.trails, i)

		go.delete(trail_instance.trail_object_id)
		go.delete(trail_instance.follow_object_id)
		trail_maker.final(trail_instance)
	end
end

function fixed_update(self, dt)
end

function on_message(self, message_id, message, sender)
end
